paths:
  /class:
   post:
    security:
      - Authorization: []
    tags:
      - "Class"
    summary: "Register a class to the system."
    description: "This API will allow the admin to register a new class."
    produces:
      - "application/json"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: "The name of the class to be registered."
    responses:
      '200':
        description: "Class registered successfully."
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "success"
                statusCode:
                  type: integer
                  example: 200
                message:
                  type: string
                  example: "Class registered successfully."
      '400':
        description: "Bad request due to invalid or missing data."
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "error"
                statusCode:
                  type: integer
                  example: 400
                message:
                  type: string
                  example: "Invalid request: missing or incorrect fields."
      '409':
        description: "Conflict error. Class already exists."
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "error"
                statusCode:
                  type: integer
                  example: 409
                message:
                  type: string
                  example: "Class already exists."
      '500':
        description: "Internal server error. Unexpected issue occurred."
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "error"
                statusCode:
                  type: integer
                  example: 500
                message:
                  type: string
                  example: "An unexpected error occurred."
   
  /class/{classId}:
   get:
    security:
      - Authorization: []
    tags:
      - "Class"
    summary: "Fetch class details by classId"
    description: "This API will allow the admin to fetch details of a specific class using its ID."
    produces:
      - "application/json"
    parameters:
      - in: path
        name: classId
        required: true
        schema:
          type: string
        description: "ID of the class to fetch."
    responses:
      '200':
        description: "Class details fetched successfully."
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "success"
                statusCode:
                  type: integer
                  example: 200
                data:
                  type: object
                  properties:
                    section:
                      type: string
                      example: "64b2fdae2391a8723e40b1a5"
                      format: objectId
                    name:
                      type: string
                      example: "Mathematics"
                    admin:
                       type: string
                       example: "64b2fdae2391a8723e40b1a5"
                       format: objectId
                message:
                  type: string
                  example: "Class details fetched successfully."
      '400':
        description: "Bad request due to invalid or missing classId."
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "error"
                statusCode:
                  type: integer
                  example: 400
                message:
                  type: string
                  example: "Invalid request: classId is required."
      '404':
        description: "Class not found."
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "error"
                statusCode:
                  type: integer
                  example: 404
                message:
                  type: string
                  example: "Class not found with the provided classId."
      '500':
        description: "Internal server error. Unexpected issue occurred."
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "error"
                statusCode:
                  type: integer
                  example: 500
                message:
                  type: string
                  example: "An unexpected error occurred."

   delete:
    security:
      - Authorization: [] # Assuming a Bearer token
    tags:
      - "Class"
    summary: "Delete a class by classId"
    description: "This API allows the admin to delete a specific class using its ID."
    parameters:
      - in: path
        name: classId
        required: true
        schema:
          type: string
          description: "ID of the class to delete."
    responses:
      '200':
        description: "Class deleted successfully."
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "success"
                statusCode:
                  type: integer
                  example: 200
                message:
                  type: string
                  example: "Class deleted successfully."
      '400':
        description: "Invalid or missing classId."
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "error"
                statusCode:
                  type: integer
                  example: 400
                message:
                  type: string
                  example: "Invalid request: classId is required."
      '404':
        description: "Class not found with the provided classId."
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "error"
                statusCode:
                  type: integer
                  example: 404
                message:
                  type: string
                  example: "Class not found with the provided classId."
      '500':
        description: "Unexpected error."
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "error"
                statusCode:
                  type: integer
                  example: 500
                message:
                  type: string
                  example: "An unexpected error occurred."

  

                
  /class/all: 
   get:
      security:
        - Authorization: []
      tags:
      - "Class"
      summary: "Get class by admin"
      description: "This API will allow admin to get all classes."
      produces:
      - "application/json"
      responses:
        '200':
          description: "Classes fetched successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        admin:
                          type: string
                          example: "64b2fdae2391a8723e40b1a5"
                          format: objectId
                        section:
                          type: string
                          example: "64b2fdae2391a8723e40b1a5" 
                          format: objectId 
                  message:
                    type: string
                    example: "Classes fetched successfully."
        '400':
          description: "Bad request due to invalid or missing data."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Invalid request: missing or incorrect fields."
        '404':
          description: "No classes found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "No classes found."
        '500':
          description: "Internal server error. Unexpected issue occurred."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: "An unexpected error occurred."

